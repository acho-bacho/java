package algorithms.strings;

import java.util.*;

// https://www.geeksforgeeks.org/given-a-string-print-all-possible-palindromic-partition/


public class AllPalindromes {

    public static void main(String[] args) {

        String input = "nitin";

        System.out.println("All possible palindrome partions for " + input + " are :");

        allPalPartitions(input);


        //Set<String> res = findAllPalindromesUsingBruteForceApproach(input);
        //res.stream().forEach(s -> System.out.println(s));
    }

    // Function to print all possible palindromic partitions of str. It mainly creates vectors and calls allPalPartUtil()
    private static void allPalPartitions(String input) {
        int n = input.length();

        // To Store all palindromic partitions
        ArrayList<ArrayList<String>> allPart = new ArrayList<>();

        // To store current palindromic partition
        Deque<String> currPart = new LinkedList<String>();

        // Call recursive function to generate all partiions and store in allPart
        allPalPartitonsUtil(allPart, currPart, 0, n, input);


 /*
        allPart.stream().forEach(s -> s.stream().forEach(c -> System.out.println(c)));
   */

        // Print all partitions generated by above call
        for (int i = 0; i < allPart.size(); i++) {
            for (int j = 0; j < allPart.get(i).size(); j++) {
                System.out.print(allPart.get(i).get(j) + " ");
            }
            System.out.println();
        }


    }

    // Recursive function to find all palindromic partitions of input[start..n-1]
    // allPart --> A ArrayList of Deque of strings. Every Deque inside it stores a partition
    // currPart --> A Deque of strings to store current partition
    private static void allPalPartitonsUtil(ArrayList<ArrayList<String>> allPart, Deque<String> currPart, int start, int end, String input) {
        // If 'start' has reached len
        if (start >= end) {
            allPart.add(new ArrayList<>(currPart));
            return;
        }

        // Pick all possible ending points for substrings
        for (int i = start; i < end; i++) {

            // If substring str[start..i] is palindrome
            if (isPalindrome(input, start, i)) {

                // Add the substring to result
                currPart.addLast(input.substring(start, i + 1));

                // Recur for remaining substring
                allPalPartitonsUtil(allPart, currPart, i + 1, end, input);

                // Remove substring str[start..i] from current partition
                currPart.removeLast();
            }
        }
    }

    private static boolean isPalindrome(String input, int start, int end) {
        while (start < end) {
            if (input.charAt(start++) != input.charAt(end--))
                return false;
        }
        return true;
    }


    ///////////////////////////////////////////////////////////


    // https://www.baeldung.com/java-palindrome-substrings
    public static Set<String> findAllPalindromesUsingBruteForceApproach(String input) {

        Set<String> palindromes = new HashSet<>();

        for (int i = 0; i < input.length(); i++) {

            for (int j = i + 1; j <= input.length(); j++) {

                if (isPalindrome(input.substring(i, j))) {
                    palindromes.add(input.substring(i, j));
                }
            }
        }

        return palindromes;
    }

    private static boolean isPalindrome(String input) {
        StringBuilder plain = new StringBuilder(input);
        StringBuilder reverse = plain.reverse();
        return (reverse.toString()).equals(input);
    }


}
